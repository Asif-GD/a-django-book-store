openapi: 3.0.3
info:
  title: A Book Store API
  version: 1.0.0
  description: An API for performing CRUD operations related to a book store using
    Django Rest Framework.
paths:
  /api-token-auth/:
    post:
      operationId: api_token_auth_create
      tags:
      - api-token-auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /book/:
    get:
      operationId: book_list
      description: A simple ViewSet for listing, retrieving, creating, updating, and
        soft_deleting books.
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
        schema:
          type: string
      tags:
      - book
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedBookListList'
          description: ''
    post:
      operationId: book_create
      description: A simple ViewSet for listing, retrieving, creating, updating, and
        soft_deleting books.
      tags:
      - book
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/BookList'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/BookList'
          description: ''
  /book/{id}/:
    get:
      operationId: book_retrieve
      description: A simple ViewSet for listing, retrieving, creating, updating, and
        soft_deleting books.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Book.
        required: true
      tags:
      - book
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/BookList'
          description: ''
    put:
      operationId: book_update
      description: A simple ViewSet for listing, retrieving, creating, updating, and
        soft_deleting books.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Book.
        required: true
      tags:
      - book
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/BookList'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/BookList'
          description: ''
    patch:
      operationId: book_partial_update
      description: A simple ViewSet for listing, retrieving, creating, updating, and
        soft_deleting books.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Book.
        required: true
      tags:
      - book
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedBookList'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/BookList'
          description: ''
    delete:
      operationId: book_destroy
      description: A simple ViewSet for listing, retrieving, creating, updating, and
        soft_deleting books.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Book.
        required: true
      tags:
      - book
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    BookList:
      type: object
      description: |-
        A `ModelSerializer` is just a regular `Serializer`, except that:

        * A set of default fields are automatically populated.
        * A set of default validators are automatically populated.
        * Default `.create()` and `.update()` implementations are provided.

        The process of automatically determining a set of serializer fields
        based on the model fields is reasonably complex, but you almost certainly
        don't need to dig into the implementation.

        If the `ModelSerializer` class *doesn't* generate the set of fields that
        you need you should either declare the extra/differing fields explicitly on
        the serializer class, or simply use a `Serializer` class.


        Included Mixins:

        * A mixin class to enable sparse fieldsets is included
        * A mixin class to enable validation of included resources is included
      properties:
        id:
          type: integer
          readOnly: true
        book_author:
          type: string
        book_genre:
          type: string
        book_year_of_publication:
          type: integer
        book_availability:
          type: boolean
          default: true
        book_delete_status:
          type: boolean
          default: false
        book_isbn_13:
          type: integer
        title:
          type: string
        description:
          type: string
          nullable: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - book_author
      - book_genre
      - book_isbn_13
      - book_year_of_publication
      - id
      - slug
      - title
    PaginatedBookListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/BookList'
    PatchedBookList:
      type: object
      description: |-
        A `ModelSerializer` is just a regular `Serializer`, except that:

        * A set of default fields are automatically populated.
        * A set of default validators are automatically populated.
        * Default `.create()` and `.update()` implementations are provided.

        The process of automatically determining a set of serializer fields
        based on the model fields is reasonably complex, but you almost certainly
        don't need to dig into the implementation.

        If the `ModelSerializer` class *doesn't* generate the set of fields that
        you need you should either declare the extra/differing fields explicitly on
        the serializer class, or simply use a `Serializer` class.


        Included Mixins:

        * A mixin class to enable sparse fieldsets is included
        * A mixin class to enable validation of included resources is included
      properties:
        id:
          type: integer
          readOnly: true
        book_author:
          type: string
        book_genre:
          type: string
        book_year_of_publication:
          type: integer
        book_availability:
          type: boolean
          default: true
        book_delete_status:
          type: boolean
          default: false
        book_isbn_13:
          type: integer
        title:
          type: string
        description:
          type: string
          nullable: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
